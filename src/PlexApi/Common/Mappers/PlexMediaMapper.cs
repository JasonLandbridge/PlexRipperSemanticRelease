using LukeHagar.PlexAPI.SDK.Models.Requests;

namespace PlexRipper.PlexApi;

public static class PlexMediaMapper
{
    public static PlexMovie ToPlexMovie(this PlexMedia source, GetLibraryItemsMetadata originalSource) =>
        new()
        {
            Id = source.Id,
            Key = source.Key,
            Title = source.Title,
            Year = source.Year,
            SortIndex = source.SortIndex,
            SearchTitle = source.SearchTitle,
            Duration = source.Duration,
            MediaSize = source.MediaSize,
            MetaDataKey = source.MetaDataKey,
            ChildCount = source.ChildCount,
            AddedAt = source.AddedAt,
            UpdatedAt = source.UpdatedAt,
            HasThumb = source.HasThumb,
            HasArt = source.HasArt,
            HasBanner = source.HasBanner,
            HasTheme = source.HasTheme,
            MediaData = source.MediaData,
            PlexLibraryId = source.PlexLibraryId,
            PlexServerId = source.PlexServerId,
            FullBannerUrl = source.FullBannerUrl,
            Studio = source.Studio,
            Summary = source.Summary,
            ContentRating = source.ContentRating,
            Rating = source.Rating,
            OriginallyAvailableAt = source.OriginallyAvailableAt,
            FullTitle = $"{originalSource.Title} ({originalSource.Year})",
            PlexLibrary = source.PlexLibrary,
            PlexServer = source.PlexServer,
            Type = source.Type,
            Guid = source.Guid,
            Guid_IMDB = source.Guid_IMDB,
            Guid_TMDB = source.Guid_TMDB,
            Guid_TVDB = source.Guid_TVDB,
        };

    public static PlexTvShow ToPlexTvShow(this PlexMedia source, GetLibraryItemsMetadata originalSource) =>
        new()
        {
            Id = source.Id,
            Key = source.Key,
            Title = source.Title,
            Year = source.Year,
            SortIndex = source.SortIndex,
            SearchTitle = source.SearchTitle,
            Duration = source.Duration,
            MediaSize = source.MediaSize,
            MetaDataKey = source.MetaDataKey,
            ChildCount = source.ChildCount,
            GrandChildCount = 0, // This is set later on in BuildTvShowTree
            AddedAt = source.AddedAt,
            UpdatedAt = source.UpdatedAt,
            HasThumb = source.HasThumb,
            HasArt = source.HasArt,
            HasBanner = source.HasBanner,
            HasTheme = source.HasTheme,
            MediaData = source.MediaData,
            PlexLibraryId = source.PlexLibraryId,
            PlexServerId = source.PlexServerId,
            FullBannerUrl = source.FullBannerUrl,
            Studio = source.Studio,
            Summary = source.Summary,
            ContentRating = source.ContentRating,
            Rating = source.Rating,
            OriginallyAvailableAt = source.OriginallyAvailableAt,
            FullTitle = originalSource.Title,
            PlexLibrary = source.PlexLibrary,
            PlexServer = source.PlexServer,
            Type = source.Type,
            Guid = source.Guid,
            Guid_IMDB = source.Guid_IMDB,
            Guid_TMDB = source.Guid_TMDB,
            Guid_TVDB = source.Guid_TVDB,
        };

    public static PlexTvShowSeason ToPlexTvShowSeason(this PlexMedia source, GetLibraryItemsMetadata originalSource) =>
        new()
        {
            Id = source.Id,
            Key = source.Key,
            Title = source.Title,
            Year = source.Year,
            SortIndex = source.SortIndex,
            SearchTitle = source.SearchTitle,
            Duration = source.Duration,
            MediaSize = source.MediaSize,
            MetaDataKey = source.MetaDataKey,
            ChildCount = source.ChildCount,
            AddedAt = source.AddedAt,
            UpdatedAt = source.UpdatedAt,
            HasThumb = source.HasThumb,
            HasArt = source.HasArt,
            HasBanner = source.HasBanner,
            HasTheme = source.HasTheme,
            MediaData = source.MediaData,
            PlexLibraryId = source.PlexLibraryId,
            PlexServerId = source.PlexServerId,
            FullBannerUrl = source.FullBannerUrl,
            Studio = source.Studio,
            Summary = source.Summary,
            ContentRating = source.ContentRating,
            Rating = source.Rating,
            ParentKey = originalSource.ParentRatingKey != null ? int.Parse(originalSource.ParentRatingKey) : -1,
            OriginallyAvailableAt = source.OriginallyAvailableAt,
            FullTitle = $"{originalSource.ParentTitle}/{originalSource.Title}",
            PlexLibrary = source.PlexLibrary,
            PlexServer = source.PlexServer,
            Type = source.Type,
            Guid = source.Guid,
            Guid_IMDB = source.Guid_IMDB,
            Guid_TMDB = source.Guid_TMDB,
            Guid_TVDB = source.Guid_TVDB,
        };

    public static PlexTvShowEpisode ToPlexTvShowEpisode(
        this PlexMedia source,
        GetLibraryItemsMetadata originalSource
    ) =>
        new()
        {
            Id = source.Id,
            Key = source.Key,
            Title = source.Title,
            Year = source.Year,
            SortIndex = source.SortIndex,
            SearchTitle = source.SearchTitle,
            Duration = source.Duration,
            MediaSize = source.MediaSize,
            MetaDataKey = source.MetaDataKey,
            ChildCount = source.ChildCount,
            AddedAt = source.AddedAt,
            UpdatedAt = source.UpdatedAt,
            HasThumb = source.HasThumb,
            HasArt = source.HasArt,
            HasBanner = source.HasBanner,
            HasTheme = source.HasTheme,
            MediaData = source.MediaData,
            PlexLibraryId = source.PlexLibraryId,
            PlexServerId = source.PlexServerId,
            FullBannerUrl = source.FullBannerUrl,
            Studio = source.Studio,
            Summary = source.Summary,
            ContentRating = source.ContentRating,
            Rating = source.Rating,
            OriginallyAvailableAt = source.OriginallyAvailableAt,
            FullTitle = $"{originalSource.GrandparentTitle}/{originalSource.ParentTitle}/{originalSource.Title}",
            PlexLibrary = source.PlexLibrary,
            PlexServer = source.PlexServer,
            ParentKey = originalSource.ParentRatingKey != null ? int.Parse(originalSource.ParentRatingKey) : -1,
            Type = source.Type,
            Guid = source.Guid,
            Guid_IMDB = source.Guid_IMDB,
            Guid_TMDB = source.Guid_TMDB,
            Guid_TVDB = source.Guid_TVDB,
        };
}
