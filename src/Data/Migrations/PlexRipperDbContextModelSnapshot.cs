// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlexRipper.Data;

#nullable disable

namespace PlexRipper.Data.Migrations
{
    [DbContext(typeof(PlexRipperDbContext))]
    partial class PlexRipperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("NATURALSORT")
                .HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzBlobTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<byte[]>("BlobData")
                        .HasColumnType("bytea")
                        .HasColumnName("BLOB_DATA");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_BLOB_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzCalendar", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("CalendarName")
                        .HasColumnType("text")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("CALENDAR");

                    b.HasKey("SchedulerName", "CalendarName");

                    b.ToTable("QRTZ_CALENDARS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzCronTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CRON_EXPRESSION");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_CRON_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzFiredTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("EntryId")
                        .HasColumnType("text")
                        .HasColumnName("ENTRY_ID");

                    b.Property<long>("FiredTime")
                        .HasColumnType("bigint")
                        .HasColumnName("FIRED_TIME");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<bool>("IsNonConcurrent")
                        .HasColumnType("bool")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<string>("JobGroup")
                        .HasColumnType("text")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .HasColumnType("text")
                        .HasColumnName("JOB_NAME");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("PRIORITY");

                    b.Property<bool?>("RequestsRecovery")
                        .HasColumnType("bool")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.Property<long>("ScheduledTime")
                        .HasColumnType("bigint")
                        .HasColumnName("SCHED_TIME");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("STATE");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.HasKey("SchedulerName", "EntryId");

                    b.HasIndex("InstanceName")
                        .HasDatabaseName("IDX_QRTZ_FT_TRIG_INST_NAME");

                    b.HasIndex("JobGroup")
                        .HasDatabaseName("IDX_QRTZ_FT_JOB_GROUP");

                    b.HasIndex("JobName")
                        .HasDatabaseName("IDX_QRTZ_FT_JOB_NAME");

                    b.HasIndex("RequestsRecovery")
                        .HasDatabaseName("IDX_QRTZ_FT_JOB_REQ_RECOVERY");

                    b.HasIndex("TriggerGroup")
                        .HasDatabaseName("IDX_QRTZ_FT_TRIG_GROUP");

                    b.HasIndex("TriggerName")
                        .HasDatabaseName("IDX_QRTZ_FT_TRIG_NAME");

                    b.HasIndex("SchedulerName", "TriggerName", "TriggerGroup")
                        .HasDatabaseName("IDX_QRTZ_FT_TRIG_NM_GP");

                    b.ToTable("QRTZ_FIRED_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzJobDetail", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("JobName")
                        .HasColumnType("text")
                        .HasColumnName("JOB_NAME");

                    b.Property<string>("JobGroup")
                        .HasColumnType("text")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsDurable")
                        .HasColumnType("bool")
                        .HasColumnName("IS_DURABLE");

                    b.Property<bool>("IsNonConcurrent")
                        .HasColumnType("bool")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<bool>("IsUpdateData")
                        .HasColumnType("bool")
                        .HasColumnName("IS_UPDATE_DATA");

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("JOB_CLASS_NAME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("bytea")
                        .HasColumnName("JOB_DATA");

                    b.Property<bool>("RequestsRecovery")
                        .HasColumnType("bool")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.HasKey("SchedulerName", "JobName", "JobGroup");

                    b.HasIndex("RequestsRecovery")
                        .HasDatabaseName("IDX_QRTZ_J_REQ_RECOVERY");

                    b.ToTable("QRTZ_JOB_DETAILS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzLock", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("LockName")
                        .HasColumnType("text")
                        .HasColumnName("LOCK_NAME");

                    b.HasKey("SchedulerName", "LockName");

                    b.ToTable("QRTZ_LOCKS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzPausedTriggerGroup", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.HasKey("SchedulerName", "TriggerGroup");

                    b.ToTable("QRTZ_PAUSED_TRIGGER_GRPS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzSchedulerState", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("InstanceName")
                        .HasColumnType("text")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<long>("CheckInInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("CHECKIN_INTERVAL");

                    b.Property<long>("LastCheckInTime")
                        .HasColumnType("bigint")
                        .HasColumnName("LAST_CHECKIN_TIME");

                    b.HasKey("SchedulerName", "InstanceName");

                    b.ToTable("QRTZ_SCHEDULER_STATE", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzSimplePropertyTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<bool?>("BooleanProperty1")
                        .HasColumnType("bool")
                        .HasColumnName("BOOL_PROP_1");

                    b.Property<bool?>("BooleanProperty2")
                        .HasColumnType("bool")
                        .HasColumnName("BOOL_PROP_2");

                    b.Property<decimal?>("DecimalProperty1")
                        .HasColumnType("numeric")
                        .HasColumnName("DEC_PROP_1");

                    b.Property<decimal?>("DecimalProperty2")
                        .HasColumnType("numeric")
                        .HasColumnName("DEC_PROP_2");

                    b.Property<int?>("IntegerProperty1")
                        .HasColumnType("integer")
                        .HasColumnName("INT_PROP_1");

                    b.Property<int?>("IntegerProperty2")
                        .HasColumnType("integer")
                        .HasColumnName("INT_PROP_2");

                    b.Property<long?>("LongProperty1")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_1");

                    b.Property<long?>("LongProperty2")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_2");

                    b.Property<string>("StringProperty1")
                        .HasColumnType("text")
                        .HasColumnName("STR_PROP_1");

                    b.Property<string>("StringProperty2")
                        .HasColumnType("text")
                        .HasColumnName("STR_PROP_2");

                    b.Property<string>("StringProperty3")
                        .HasColumnType("text")
                        .HasColumnName("STR_PROP_3");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPROP_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzSimpleTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<long>("RepeatCount")
                        .HasColumnType("bigint")
                        .HasColumnName("REPEAT_COUNT");

                    b.Property<long>("RepeatInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<long>("TimesTriggered")
                        .HasColumnType("bigint")
                        .HasColumnName("TIMES_TRIGGERED");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPLE_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasColumnType("text")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CalendarName")
                        .HasColumnType("text")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long?>("EndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("END_TIME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("bytea")
                        .HasColumnName("JOB_DATA");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("JOB_NAME");

                    b.Property<short?>("MisfireInstruction")
                        .HasColumnType("smallint")
                        .HasColumnName("MISFIRE_INSTR");

                    b.Property<long?>("NextFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("NEXT_FIRE_TIME");

                    b.Property<long?>("PreviousFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("PREV_FIRE_TIME");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("PRIORITY");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("START_TIME");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_STATE");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TRIGGER_TYPE");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.HasIndex("NextFireTime")
                        .HasDatabaseName("IDX_QRTZ_T_NEXT_FIRE_TIME");

                    b.HasIndex("TriggerState")
                        .HasDatabaseName("IDX_QRTZ_T_STATE");

                    b.HasIndex("NextFireTime", "TriggerState")
                        .HasDatabaseName("IDX_QRTZ_T_NFT_ST");

                    b.HasIndex("SchedulerName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<string>("DownloadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2)
                        .UseCollation("NATURALSORT");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("DownloadWorkerTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DownloadWorkerTaskId");

                    b.ToTable("DownloadWorkerTasksLogs");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<long>("BytesReceived")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<string>("DownloadDirectory")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("DownloadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<Guid>("DownloadTaskId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<long>("EndByte")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("FileLocationUrl")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("PartIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartByte")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("DownloadTaskId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("DownloadWorkerTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.FileTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationDirectory")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DownloadTaskId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadTaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePathsCompressed")
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("FileTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.FolderPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("FolderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("FolderPaths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectoryPath = "/Downloads",
                            DisplayName = "Download Path",
                            FolderType = "DownloadFolder",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 2,
                            DirectoryPath = "/Movies",
                            DisplayName = "Movie Destination Path",
                            FolderType = "MovieFolder",
                            MediaType = "Movie"
                        },
                        new
                        {
                            Id = 3,
                            DirectoryPath = "/TvShows",
                            DisplayName = "Tv Show Destination Path",
                            FolderType = "TvShowFolder",
                            MediaType = "TvShow"
                        },
                        new
                        {
                            Id = 4,
                            DirectoryPath = "/Music",
                            DisplayName = "Music Destination Path",
                            FolderType = "MusicFolder",
                            MediaType = "Music"
                        },
                        new
                        {
                            Id = 5,
                            DirectoryPath = "/Photos",
                            DisplayName = "Photos Destination Path",
                            FolderType = "PhotosFolder",
                            MediaType = "Photos"
                        },
                        new
                        {
                            Id = 6,
                            DirectoryPath = "/Other",
                            DisplayName = "Other Videos Destination Path",
                            FolderType = "OtherVideosFolder",
                            MediaType = "OtherVideos"
                        },
                        new
                        {
                            Id = 7,
                            DirectoryPath = "/Games",
                            DisplayName = "Games Videos Destination Path",
                            FolderType = "GamesVideosFolder",
                            MediaType = "Games"
                        },
                        new
                        {
                            Id = 8,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #1 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 9,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #2 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        },
                        new
                        {
                            Id = 10,
                            DirectoryPath = "/",
                            DisplayName = "Reserved #3 Destination Path",
                            FolderType = "None",
                            MediaType = "None"
                        });
                });

            modelBuilder.Entity("PlexRipper.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<string>("AuthenticationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<bool>("HasPassword")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<long>("PlexId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<string>("Username")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("ValidatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("PlexAccounts");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountLibrary", b =>
                {
                    b.Property<int>("PlexAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexAccountId", "PlexLibraryId", "PlexServerId");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexAccountLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountServer", b =>
                {
                    b.Property<int>("PlexAccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AuthToken")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("AuthTokenCreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("PlexAccountId", "PlexServerId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexAccountServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexGenres");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("DefaultDestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("LibraryLocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<string>("LibraryLocationPath")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("MetaData")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2)
                        .UseCollation("NATURALSORT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("DefaultDestinationId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(21);

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(17);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(22);

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(15);

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL")
                        .HasColumnOrder(11);

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4)
                        .UseCollation("NATURALSORT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieGenre", b =>
                {
                    b.Property<int>("PlexMoviesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int?>("PlexMovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexMoviesId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.HasIndex("PlexMovieId");

                    b.ToTable("PlexMovieGenres");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieRole", b =>
                {
                    b.Property<int>("PlexMoviesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int?>("PlexMovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlexRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlexMoviesId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.HasIndex("PlexMovieId");

                    b.HasIndex("PlexRoleId");

                    b.ToTable("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlexRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<string>("Device")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<bool>("DnsRebindingProtection")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(22);

                    b.Property<bool>("Home")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<bool>("HttpsRequired")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<string>("MachineIdentifier")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<bool>("NatLoopbackSupported")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(23);

                    b.Property<bool>("Owned")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(15);

                    b.Property<long>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<string>("PlatformVersion")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<string>("PlexServerOwnerUsername")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("PreferredConnectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<bool>("Presence")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<string>("Product")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<string>("ProductVersion")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Provides")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("PublicAddress")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<bool>("PublicAddressMatches")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(21);

                    b.Property<bool>("Relay")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<bool>("ServerFixApplyDNSFix")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(24);

                    b.Property<bool>("Synced")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(17);

                    b.HasKey("Id");

                    b.ToTable("PlexServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<bool>("IPv4")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<bool>("IPv6")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<bool>("Local")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<bool>("PortFix")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<bool>("Relay")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexServerConnections");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("PlexServerConnectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("StatusMessage")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlexServerConnectionId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexServerStatuses");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(21);

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(17);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(22);

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(15);

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL")
                        .HasColumnOrder(11);

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4)
                        .UseCollation("NATURALSORT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.ToTable("PlexTvShows");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(21);

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(17);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(22);

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(15);

                    b.Property<int>("ParentKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL")
                        .HasColumnOrder(11);

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4)
                        .UseCollation("NATURALSORT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("TvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvShowSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.HasIndex("TvShowId");

                    b.HasIndex("TvShowSeasonId");

                    b.ToTable("PlexTvShowEpisodes");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowGenre", b =>
                {
                    b.Property<int>("PlexTvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.HasKey("PlexTvShowId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.ToTable("PlexTvShowGenre");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowRole", b =>
                {
                    b.Property<int>("PlexTvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.HasKey("PlexTvShowId", "PlexGenreId");

                    b.HasIndex("PlexGenreId");

                    b.ToTable("PlexTvShowRole");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("FullTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(21);

                    b.Property<bool>("HasArt")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<bool>("HasBanner")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<bool>("HasTheme")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<bool>("HasThumb")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(17);

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("MediaData")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(22);

                    b.Property<long>("MediaSize")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("MetaDataKey")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("OriginallyAvailableAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(15);

                    b.Property<int>("ParentKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlexServerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL")
                        .HasColumnOrder(11);

                    b.Property<string>("SortTitle")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4)
                        .UseCollation("NATURALSORT");

                    b.Property<string>("Studio")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("TvShowId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlexLibraryId");

                    b.HasIndex("PlexServerId");

                    b.HasIndex("TvShowId");

                    b.ToTable("PlexTvShowSeason");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskFileBase", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskBase");

                    b.Property<long>("DataReceived")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<long>("DataTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<string>("DirectoryMeta")
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(16);

                    b.Property<long>("DownloadSpeed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<string>("FileLocationUrl")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11)
                        .UseCollation("NATURALSORT");

                    b.Property<long>("FileTransferSpeed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(15);

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskParentBase", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskBase");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskMovieFile", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskFileBase");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ParentId");

                    b.ToTable("DownloadTaskMovieFile");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowEpisodeFile", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskFileBase");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ParentId");

                    b.ToTable("DownloadTaskTvShowEpisodeFile");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskMovie", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskParentBase");

                    b.ToTable("DownloadTaskMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShow", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskParentBase");

                    b.ToTable("DownloadTaskTvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowEpisode", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskParentBase");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ParentId");

                    b.ToTable("DownloadTaskTvShowEpisode");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowSeason", b =>
                {
                    b.HasBaseType("PlexRipper.Domain.DownloadTaskParentBase");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ParentId");

                    b.ToTable("DownloadTaskTvShowSeason");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzBlobTrigger", b =>
                {
                    b.HasOne("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", "Trigger")
                        .WithMany("BlobTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzCronTrigger", b =>
                {
                    b.HasOne("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", "Trigger")
                        .WithMany("CronTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzSimplePropertyTrigger", b =>
                {
                    b.HasOne("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", "Trigger")
                        .WithMany("SimplePropertyTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzSimpleTrigger", b =>
                {
                    b.HasOne("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", "Trigger")
                        .WithMany("SimpleTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", b =>
                {
                    b.HasOne("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzJobDetail", "JobDetail")
                        .WithMany("Triggers")
                        .HasForeignKey("SchedulerName", "JobName", "JobGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobDetail");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskBase", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerLog", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadWorkerTask", "DownloadWorkerTask")
                        .WithMany("DownloadWorkerTaskLogs")
                        .HasForeignKey("DownloadWorkerTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadWorkerTask");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTaskFileBase", "DownloadTask")
                        .WithMany("DownloadWorkerTasks")
                        .HasForeignKey("DownloadTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadTask");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.FileTask", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountLibrary", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexAccount", "PlexAccount")
                        .WithMany("PlexAccountLibraries")
                        .HasForeignKey("PlexAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("PlexAccountLibraries")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexAccount");

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccountServer", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexAccount", "PlexAccount")
                        .WithMany("PlexAccountServers")
                        .HasForeignKey("PlexAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("PlexAccountServers")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexAccount");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.HasOne("PlexRipper.Domain.FolderPath", "DefaultDestination")
                        .WithMany("PlexLibraries")
                        .HasForeignKey("DefaultDestinationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("PlexLibraries")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultDestination");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("Movies")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieGenre", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany("PlexMovies")
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexMovie", "PlexMovie")
                        .WithMany("PlexMovieGenres")
                        .HasForeignKey("PlexMovieId");

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovieRole", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexMovie", "PlexMovie")
                        .WithMany("PlexMovieRoles")
                        .HasForeignKey("PlexMovieId");

                    b.HasOne("PlexRipper.Domain.PlexRole", null)
                        .WithMany("PlexMovieRoles")
                        .HasForeignKey("PlexRoleId");

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexMovie");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerConnection", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("PlexServerConnections")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerStatus", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexServerConnection", "PlexServerConnection")
                        .WithMany("PlexServerStatus")
                        .HasForeignKey("PlexServerConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany("ServerStatus")
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexServer");

                    b.Navigation("PlexServerConnection");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany("TvShows")
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowEpisode", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShowSeason", "TvShowSeason")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");

                    b.Navigation("TvShow");

                    b.Navigation("TvShowSeason");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowGenre", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "PlexTvShow")
                        .WithMany("PlexTvShowGenres")
                        .HasForeignKey("PlexTvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexTvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowRole", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexGenre", "PlexGenre")
                        .WithMany()
                        .HasForeignKey("PlexGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "PlexTvShow")
                        .WithMany("PlexTvShowRoles")
                        .HasForeignKey("PlexTvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexGenre");

                    b.Navigation("PlexTvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.HasOne("PlexRipper.Domain.PlexLibrary", "PlexLibrary")
                        .WithMany()
                        .HasForeignKey("PlexLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexServer", "PlexServer")
                        .WithMany()
                        .HasForeignKey("PlexServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlexRipper.Domain.PlexTvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlexLibrary");

                    b.Navigation("PlexServer");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskMovieFile", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTaskMovie", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowEpisodeFile", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTaskTvShowEpisode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowEpisode", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTaskTvShowSeason", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowSeason", b =>
                {
                    b.HasOne("PlexRipper.Domain.DownloadTaskTvShow", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzJobDetail", b =>
                {
                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("AppAny.Quartz.EntityFrameworkCore.Migrations.QuartzTrigger", b =>
                {
                    b.Navigation("BlobTriggers");

                    b.Navigation("CronTriggers");

                    b.Navigation("SimplePropertyTriggers");

                    b.Navigation("SimpleTriggers");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadWorkerTask", b =>
                {
                    b.Navigation("DownloadWorkerTaskLogs");
                });

            modelBuilder.Entity("PlexRipper.Domain.FolderPath", b =>
                {
                    b.Navigation("PlexLibraries");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexAccount", b =>
                {
                    b.Navigation("PlexAccountLibraries");

                    b.Navigation("PlexAccountServers");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexGenre", b =>
                {
                    b.Navigation("PlexMovies");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexLibrary", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("PlexAccountLibraries");

                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexMovie", b =>
                {
                    b.Navigation("PlexMovieGenres");

                    b.Navigation("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexRole", b =>
                {
                    b.Navigation("PlexMovieRoles");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServer", b =>
                {
                    b.Navigation("PlexAccountServers");

                    b.Navigation("PlexLibraries");

                    b.Navigation("PlexServerConnections");

                    b.Navigation("ServerStatus");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexServerConnection", b =>
                {
                    b.Navigation("PlexServerStatus");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShow", b =>
                {
                    b.Navigation("PlexTvShowGenres");

                    b.Navigation("PlexTvShowRoles");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("PlexRipper.Domain.PlexTvShowSeason", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskFileBase", b =>
                {
                    b.Navigation("DownloadWorkerTasks");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskMovie", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShow", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowEpisode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("PlexRipper.Domain.DownloadTaskTvShowSeason", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
